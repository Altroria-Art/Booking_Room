import { Router } from 'express'
import { pool } from '../db.js'

const router = Router()

// 1) ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏™‡πà select
router.get('/room-types', async (req, res) => {
  const [rows] = await pool.query(
    'SELECT id, type_name FROM room_types ORDER BY id'
  )
  res.json(rows)
})

// 2) ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ ?typeId=)
router.get('/rooms', async (req, res) => {
  const typeId = req.query.typeId ? Number(req.query.typeId) : null // üîß cast ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

  let sql = `
    SELECT
      r.id,
      r.room_code,
      r.room_type_id,
      t.type_name
    FROM rooms r
    JOIN room_types t ON t.id = r.room_type_id
  `
  const params = []
  if (typeId) {
    sql += ' WHERE r.room_type_id = ?'
    params.push(typeId)
  }
  sql += ' ORDER BY r.room_code'

  const [rows] = await pool.query(sql, params)
  res.json(rows)
})

/* 2.5) üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° ‚Äú‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‚Äù) */
router.post('/rooms', async (req, res) => {
  const { room_code, room_type_id } = req.body

  if (!room_code || room_type_id == null) {
    return res.status(400).json({ message: 'room_code ‡πÅ‡∏•‡∏∞ room_type_id ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á' })
  }

  try {
    const code = String(room_code).trim()
    const typeId = Number(room_type_id)

    const [result] = await pool.query(
      'INSERT INTO rooms (room_code, room_type_id) VALUES (?, ?)',
      [code, typeId]
    )
    const insertedId = result.insertId

    const [[row]] = await pool.query(
      `SELECT r.id, r.room_code, r.room_type_id, t.type_name
       FROM rooms r JOIN room_types t ON t.id = r.room_type_id
       WHERE r.id = ?`,
      [insertedId]
    )
    return res.status(201).json(row)
  } catch (err) {
    if (err.code === 'ER_DUP_ENTRY') {
      return res.status(409).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥ (room_code ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)' })
    }
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', detail: err.message })
  }
})

// 3) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° id
router.put('/rooms/:id', async (req, res) => {
  const id = Number(req.params.id)                    // üîß cast id
  const { room_code, room_type_id } = req.body

  if (!room_code || room_type_id == null) {
    return res.status(400).json({ message: 'room_code ‡πÅ‡∏•‡∏∞ room_type_id ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á' })
  }

  try {
    const [result] = await pool.query(
      'UPDATE rooms SET room_code = ?, room_type_id = ? WHERE id = ?',
      [String(room_code).trim(), Number(room_type_id), id] // üîß trim & cast
    )

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' })
    }

    const [[updated]] = await pool.query(
      `SELECT r.id, r.room_code, r.room_type_id, t.type_name
       FROM rooms r JOIN room_types t ON t.id = r.room_type_id
       WHERE r.id = ?`,
      [id]
    )
    res.json(updated)
  } catch (err) {
    if (err.code === 'ER_DUP_ENTRY') {
      return res.status(409).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥ (room_code ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)' })
    }
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', detail: err.message })
  }
})

// 4) ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° id
router.delete('/rooms/:id', async (req, res) => {
  try {
    const id = Number(req.params.id) // üîß cast id
    const [result] = await pool.query('DELETE FROM rooms WHERE id = ?', [id])
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' })
    }
    res.status(204).send()
  } catch (err) {
    // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏≠‡∏¢‡∏π‡πà ‚Üí FK ‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö
    if (err.code === 'ER_ROW_IS_REFERENCED_2' || err.errno === 1451) {
      return res.status(409).json({ message: '‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà' })
    }
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', detail: err.message })
  }
})

export default router
